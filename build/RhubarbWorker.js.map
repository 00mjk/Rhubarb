{"version":3,"file":"RhubarbWorker.js","sources":["../js/worker/WebSocketWorker.js"],"sourcesContent":["var WebSocketWorker = function(){\n  this.pingMsg = new Float32Array(1);\n  this.pingTransferable = new Float32Array(2);\n  this.pingTransferableList = [this.pingTransferable.buffer];\n  this.hasPingTransferableOwnership = true;\n  this.intermediateBuffers = new Object();\n  this.transferableList = [];\n  this.transferables = new Object();\n}\n\nWebSocketWorker.prototype.sendPing = function(){\n  if (worker.isSocketClosed){\n    return;\n  }\n  worker.ws.send(worker.pingMsg.buffer);\n  worker.lastPingSendTime = performance.now();\n}\n\nWebSocketWorker.prototype.onWSOpen = function(){\n  worker.isSocketClosed = false;\n  postMessage({isConnected: true});\n  setTimeout(this.sendPing, 3000);\n}\n\nWebSocketWorker.prototype.onWSMessage = function(event){\n  var view = new Float32Array(event.data);\n  var protocolID = view[0];\n  if (protocolID == 0){\n    setTimeout(worker.sendPing, 3000);\n    if (worker.hasPingTransferableOwnership){\n      var latency = performance.now() - worker.lastPingSendTime;\n      worker.pingTransferable[0] = -2;\n      worker.pingTransferable[1] = latency;\n      postMessage(worker.pingTransferable, worker.pingTransferableList);\n      worker.hasPingTransferableOwnership = false;\n    }\n  }else{\n    var transferable = worker.transferables[view.length];\n    if (!transferable){\n      var array = new Float32Array(view.length + 1);\n      transferable = {\n        array: array,\n        list: [array.buffer],\n        hasOwnership: true\n      };\n      worker.transferables[view.length] = transferable;\n    }\n    if (!transferable.hasOwnership){\n      console.error('Worker does not have transferable ownership.');\n      return;\n    }\n    transferable.array[0] = -1;\n    for (var i = 0; i < view.length; i ++){\n      transferable.array[i + 1] = view[i];\n    }\n    postMessage(transferable.array, transferable.list);\n    transferable.hasOwnership = false;\n  }\n}\n\nWebSocketWorker.prototype.onWSClose = function(){\n  worker.isSocketClosed = true;\n  postMessage({isDisconnected: true});\n}\n\nWebSocketWorker.prototype.onWSError = function(event){\n  postMessage({isError: true});\n}\n\nWebSocketWorker.prototype.connect = function(serverURL){\n  var ws = new WebSocket(serverURL);\n  ws.onopen = this.onWSOpen.bind(this);\n  ws.onmessage = this.onWSMessage.bind(this);\n  ws.onclose = this.onWSClose.bind(this);\n  ws.onerror = this.onWSError.bind(this);\n  ws.binaryType = \"arraybuffer\";\n  this.ws = ws;\n}\n\nvar worker = new WebSocketWorker();\n\nself.onmessage = function(message){\n  var data = message.data;\n\n  if (data.serverURL){\n    worker.connect(data.serverURL);\n  }else{\n    if (data[0] == -1){\n      var transferable = worker.transferables[data.length -1];\n      transferable.array = data;\n      transferable.list[0] = data.buffer;\n      transferable.hasOwnership = true;\n      return;\n    }else if (data[0] == -2){\n      worker.pingTransferable = data;\n      worker.pingTransferableList[0] = data.buffer;\n      worker.hasPingTransferableOwnership = true;\n      return;\n    }\n    if (worker.isSocketClosed){\n      return;\n    }\n    var length = data.length;\n    var intermediateBuffer = worker.intermediateBuffers[length];\n    if (!intermediateBuffer){\n      intermediateBuffer = new Float32Array(length);\n      worker.intermediateBuffers[length] = intermediateBuffer;\n    }\n    for (var i = 0; i<data.length; i++){\n      intermediateBuffer[i] = data[i];\n    }\n    worker.transferableList[0] = data.buffer;\n    postMessage(data, worker.transferableList);\n    worker.ws.send(intermediateBuffer.buffer);\n  }\n}\n"],"names":["WebSocketWorker","pingMsg","Float32Array","pingTransferable","pingTransferableList","buffer","hasPingTransferableOwnership","intermediateBuffers","Object","transferableList","transferables","prototype","sendPing","worker","isSocketClosed","ws","send","lastPingSendTime","performance","now","onWSOpen","isConnected","onWSMessage","event","view","data","protocolID","latency","transferable","length","array","hasOwnership","error","i","list","onWSClose","isDisconnected","onWSError","isError","connect","serverURL","WebSocket","onopen","bind","onmessage","onclose","onerror","binaryType","self","message","intermediateBuffer"],"mappings":"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"}